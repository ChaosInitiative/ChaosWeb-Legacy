@using ChaosInitiative.Web.ControlPanel.Services.Repositories
@using GridBlazor
@using GridShared
@using GridShared.Utility
@using GridBlazor.Pages
@using ChaosInitiative.Web.ControlPanel.Services
@using ChaosInitiative.Web.ControlPanel.Model
@inject FeatureRepository FeatureRepository
@inject GameRepository GameRepository
@inject GridModelService ModelService

<section>
    
    <div class="row">
        
        <div class="col col-auto">
            <div class="input-group mt-auto">
                <button class="btn btn-secondary" data-toggle="modal" data-target="#newFeatureModal">
                    <i class="fas fa-plus"></i> New Feature
                </button>
            </div>
        </div>

    </div>
    
    <div>
        @if (_featureGridTask != null && _featureGridTask.IsCompleted)
        {
            <GridComponent T="Feature" Grid="@_featureGrid">
                    
            </GridComponent>
        }
        else
        {
            <p class="text-center w-100 mt-3 mb-3">Loading...</p>
        } 
    </div>
    
    
    
    <!-- New Feature Modal -->
    <div class="modal fade"
         id="newFeatureModal"
         tabindex="-1"
         aria-labelledby="newFeatureModalTitle"
         aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                    
                <div class="modal-header">
                    <h4>New Feature</h4>
                </div>
                <div class="modal-body">
                    <EditForm Model="@NewFeature">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        
                        <div class="form-group">
                            <label>Name:</label>
                            <InputText @bind-Value="NewFeature.Name"
                                        class="form-control"/>

                            <label>Type</label>
                            <InputSelect @bind-Value="NewFeature.Type"
                                          class="custom-select">
                                @foreach (string type in Enum.GetNames(typeof(FeatureType)))
                                {
                                    <option value="@type">@type</option>
                                }
                            </InputSelect>
                            
                            <hr/>

                            <label>Related GitHub Issues</label>
                            <ul class="list-group">
                                @if (NewFeature.RelatedIssues != null)
                                {
                                    foreach (Issue issue in NewFeature.RelatedIssues)
                                    {
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            @issue.Game.Name
                                            <span class="badge badge-pill" style="background-color: #@issue.Game.HexColor">@issue.IssueId</span>
                                        </li>
                                    }
                                }
                            </ul>
                            <select class="custom-select">
                                @foreach (Game game in GameRepository.GetAll())
                                {
                                    <option value="@game.Name" @onclick="() => SetNewRelatedIssueOwner(game)">@game.Name</option>
                                }
                            </select>
                            <input type="number" class="form-control" placeholder="Issue ID" @onchange="(args) => SetNewRelatedIssueId(args.Value.ToString())"/>
                            <button class="btn btn-primary" @onclick="AddNewRelatedIssue">Add</button>
                            
                            <hr/>
                            
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button class="btn btn-primary">Save</button>
                </div>
            
            </div>
        </div>
    </div>
    
    
</section>

@code {

    private CGrid<Feature> _featureGrid;
    private Task _featureGridTask;
    
    public Feature NewFeature = new Feature();
    public Issue NewRelatedIssue = new Issue();

    protected override async Task OnParametersSetAsync()
    {
        IGridClient<Feature> client = ModelService.GetFeaturesGridClient();

        _featureGrid = client.Grid;
        _featureGridTask = client.UpdateGrid();
        await _featureGridTask;
    }
    
    // See what the fuck this is
    
    void SetNewRelatedIssueOwner(Game game)
    {
        NewRelatedIssue.Game = game;
    }

    void SetNewRelatedIssueId(string stringId)
    {
        if (uint.TryParse(stringId, out var uintId))
        {
            NewRelatedIssue.IssueId = uintId;
        }
        
    }

    void AddNewRelatedIssue()
    {
        NewFeature.RelatedIssues.Add(NewRelatedIssue);
        NewRelatedIssue = new Issue();
    }

}